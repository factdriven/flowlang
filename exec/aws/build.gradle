import com.amazonaws.services.lambda.model.InvocationType
import com.amazonaws.services.lambda.model.Runtime
import jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask
import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask
import jp.classmethod.aws.gradle.sns.*

buildscript {

    ext {
        kotlinVersion = '1.3.10'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
    }
}
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        name 'exposed'
        url  'https://dl.bintray.com/kotlin/exposed/'
    }
}

apply plugin: 'kotlin'
apply plugin: "jp.classmethod.aws.lambda"
apply plugin: "jp.classmethod.aws.sns"

group 'factdriven'
version '1.0.0-SNAPSHOT'

dependencies {
    compile project(':lang')

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"

    compile group: 'com.amazonaws', name: 'aws-java-sdk-stepfunctions', version: '1.11.729'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.11.729'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.0'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-sns', version: '1.11.780'
    runtimeOnly group: 'com.amazonaws', name: 'aws-lambda-java-log4j2', version: '1.2.0'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30'
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.30'


    compile group: 'org.jetbrains.exposed', name: 'exposed-core', version: '0.25.1'
    compile group: 'org.jetbrains.exposed', name: 'exposed-java-time', version: '0.25.1'
    runtime group: 'org.jetbrains.exposed', name: 'exposed-jdbc', version: '0.25.1'

    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.20'

    testCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    testCompile("org.junit.jupiter:junit-jupiter-params:5.3.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")
}

aws {
    profileName = "default"
    region = "eu-central-1"
}

lambda {
    region = "eu-central-1"
}

task zip(type: Zip, dependsOn: clean) {
    from compileKotlin
    from processResources
    into('lib') {
        from configurations.runtime
    }
    destinationDir file("build")
}


task migrateFunctionPaymentRetrieval(type: AWSLambdaMigrateFunctionTask, dependsOn: zip) {
    functionName = "PaymentRetrieval"
    role = lambdaRoleArn
    zipFile = zip.archivePath
    handler = "io.factdriven.language.execution.aws.example.function.PaymentRetrievalLambda::handleRequest"
    alias = 'DEV'
    runtime = Runtime.Java8
    timeout = 120
    memorySize = 512
    environment = [
            STEP_FUNCTION_ROLE_ARN: stepfunctionRoleArn,
            AWS_FLOW_RDS_URL: awsRdsUrl,
            AWS_FLOW_RDS_DRIVER: awsRdsDriver,
            AWS_FLOW_RDS_USER: awsRdsUser,
            AWS_FLOW_RDS_PASSWORD: awsRdsPassword,
    ]
}

task invokeFunctionPaymentRetrieval(type: AWSLambdaInvokeTask) {
    functionName = "PaymentRetrieval"
    invocationType = InvocationType.RequestResponse
    doLast {
        println "Lambda function result: " + new String(invokeResult.payload.array(), "UTF-8")
    }
}


task migrateFunctionCreditCardCharge(type: AWSLambdaMigrateFunctionTask, dependsOn: zip) {
    functionName = "CreditCardCharge"
    role = lambdaRoleArn
    zipFile = zip.archivePath
    handler = "io.factdriven.language.execution.aws.example.function.CreditCardChargeLambda::handleRequest"
    alias = 'DEV'
    runtime = Runtime.Java8
    timeout = 30
    memorySize = 512
    environment = [
            STEP_FUNCTION_ROLE_ARN: stepfunctionRoleArn,
            AWS_FLOW_RDS_URL: awsRdsUrl,
            AWS_FLOW_RDS_DRIVER: awsRdsDriver,
            AWS_FLOW_RDS_USER: awsRdsUser,
            AWS_FLOW_RDS_PASSWORD: awsRdsPassword,
    ]
}

task invokeFunctionCreditCardCharge(type: AWSLambdaInvokeTask) {
    functionName = "CreditCardCharge"
    invocationType = InvocationType.RequestResponse
    doLast {
        println "Lambda function result: " + new String(invokeResult.payload.array(), "UTF-8")
    }
}

task publishJsonMessage(type: AmazonSNSPublishMessageTask) {
    topicArn initTopicArn
    subject "io.factdriven.language.execution.aws.example.function.RetrievePayment"
    message "{\"reference\":\"a\",\"accountId\":\"b\",\"payment\":1.0}"
}

task migrateTimerEventLambda(type: AWSLambdaMigrateFunctionTask, dependsOn: zip) {
    functionName = "FlowlangTimerEvent"
    role = lambdaRoleArn
    zipFile = zip.archivePath
    handler = "io.factdriven.language.execution.aws.lambda.FlowlangTimerEventLambda::handleRequest"
    alias = 'DEV'
    runtime = Runtime.Java8
    timeout = 120
    memorySize = 512
    environment = [
            STEP_FUNCTION_ROLE_ARN: stepfunctionRoleArn,
            AWS_FLOW_RDS_URL: awsRdsUrl,
            AWS_FLOW_RDS_DRIVER: awsRdsDriver,
            AWS_FLOW_RDS_USER: awsRdsUser,
            AWS_FLOW_RDS_PASSWORD: awsRdsPassword,
    ]
}

task migrateAndInvokeAndSendMessage(type: GradleBuild) {
    tasks = ['migrateFunctionPaymentRetrieval',
             'migrateFunctionCreditCardCharge',
             'invokeFunctionPaymentRetrieval',
             'invokeFunctionCreditCardCharge',
             'publishJsonMessage']
}

task migrateAndInvoke(type: GradleBuild) {
    tasks = ['migrateFunction', 'invokeFunction']
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}