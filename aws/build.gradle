import com.amazonaws.services.lambda.model.InvocationType
import com.amazonaws.services.lambda.model.Runtime
import jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask
import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask

buildscript {

    ext {
        kotlinVersion = '1.3.10'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
    }
}
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

apply plugin: 'kotlin'
apply plugin: "jp.classmethod.aws.lambda"

group 'factdriven'
version '1.0.0-SNAPSHOT'

dependencies {
    compile project(':core')

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"

    compile group: 'com.amazonaws', name: 'aws-java-sdk-stepfunctions', version: '1.11.729'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.11.729'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.0'

    testCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    testCompile("org.junit.jupiter:junit-jupiter-params:5.3.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")
}

aws {
    profileName = "default"
    region = "eu-central-1"
}

lambda {
    region = "eu-central-1"
}

task zip(type: Zip, dependsOn: clean) {
    from compileKotlin
    from processResources
    into('lib') {
        from configurations.runtime
    }
    destinationDir file("build")
}

task migrateFunction(type: AWSLambdaMigrateFunctionTask, dependsOn: zip) {
    functionName = "MyFunctionKt"
    role = System.getenv("LAMBDA_ROLE_ARN")
    zipFile = zip.archivePath
    handler = "io.factdriven.aws.example.function.MyFunctionKt::handleRequest"
    alias = 'DEV'
    runtime = Runtime.Java8
    timeout = 30
    memorySize = 512
    environment = [
            STEP_FUNCTION_ROLE_ARN: System.getenv("STEP_FUNCTION_ROLE_ARN")
    ]
}

task invokeFunction(type: AWSLambdaInvokeTask) {
    functionName = "MyFunctionKt"
    invocationType = InvocationType.RequestResponse
    doLast {
        println "Lambda function result: " + new String(invokeResult.payload.array(), "UTF-8")
    }
}

task migrateFunctionPaymentRetrieval(type: AWSLambdaMigrateFunctionTask, dependsOn: zip) {
    functionName = "PaymentRetrieval"
    role = System.getenv("LAMBDA_ROLE_ARN")
    zipFile = zip.archivePath
    handler = "io.factdriven.aws.lambda.PaymentRetrievalLambda::handleRequest"
    alias = 'DEV'
    runtime = Runtime.Java8
    timeout = 30
    memorySize = 512
    environment = [
            STEP_FUNCTION_ROLE_ARN: System.getenv("STEP_FUNCTION_ROLE_ARN")
    ]
}

task invokeFunctionPaymentRetrieval(type: AWSLambdaInvokeTask) {
    functionName = "PaymentRetrieval"
    invocationType = InvocationType.RequestResponse
    doLast {
        println "Lambda function result: " + new String(invokeResult.payload.array(), "UTF-8")
    }
}

task migrateAndInvoke(type: GradleBuild) {
    tasks = ['migrateFunction', 'invokeFunction']
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}